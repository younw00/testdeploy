name: 카테부 CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t ghcr.io/${{ github.repository_owner }}/my-express-app:latest .

  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Prepare SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > key.pem
          chmod 600 key.pem

      - name: SSH into EC2 and pull/run container
        run: |
          # 환경변수 준비 (secrets에 해당 값들을 넣어두어야 값이 똑바로 읽어와진다!)
          HOST=${{ secrets.EC2_HOST }}
          USER=${{ secrets.EC2_USER }}

          # EC2 서버 접속 후 Docker 명령 실행
          # 현재 실행 중인 동일한 컨테이너가 있다면 삭제한다.
          ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "docker rm -f my-express-app || true"

          # GHCR로부터 최신 이미지 pull
          ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_PAT }}"
          ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "docker pull ghcr.io/${{ github.repository_owner }}/my-express-app:latest"

          # 새로운 컨테이너 실행 (포트 매핑)
          ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "docker run -d --name my-express-app -p 3000:3000 ghcr.io/${{ github.repository_owner }}/my-express-app:latest"

